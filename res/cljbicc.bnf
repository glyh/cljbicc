S = program

program = stmt


(**************)
(* Statements *)
(**************)

<stmt> = expr-stmt | return-stmt | block-stmt | if-stmt | for-stmt | while-stmt | declaration

while-stmt = <"while" "("> exp <")"> stmt

if-stmt = <"if" "("> exp <")"> stmt (<"else"> stmt)?

for-stmt = <"for" "("> expr-stmt expr-stmt exp? <")"> stmt

declaration = declspec declarator (<","> declarator)* <";">

declspec = "int"
declarator = "*"* id (<"="> exp)?

(* the more basic statements *)

block-stmt = <"{"> stmt* <"}">

return-stmt = <"return"> exp <";">

expr-stmt = exp? <";">


(***************)
(* Expressions *)
(***************)

exp = expn1

<expn1> = assign | exp0
assign = exp0 <"="> expn1

<exp0> = exp1 | eq | ne | lt | le | gt | ge
eq = exp1 <"=="> exp1
ne = exp1 <"!="> exp1
lt = exp1 <"<"> exp1
le = exp1 <"<="> exp1
gt = exp1 <">"> exp1
ge = exp1 <">="> exp1

<exp1> = exp2 | add | sub
add = exp1 <"+"> exp2
sub = exp1 <"-"> exp2

<exp2> = exp3 | mul | div
mul = exp2 <"*"> exp3
div = exp2 <"/"> exp3

<exp3> = exp-atom | positive | negative | addr | deref
<positive> = <"+"> exp3
negative = <"-"> exp3
addr = <"&"> exp3
deref = <"*"> exp3

<exp-atom> = INT | id | <"("> exp1 <")">

id = IDENT


(*********)
(* Atoms *)
(*********)

INT = #"[0-9]+"
IDENT = #"[a-zA-Z_][a-zA-Z0-9_]*"
